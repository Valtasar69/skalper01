import logging

def execute_trade(exchange, signal: str, symbol: str, size: float,
                  stop_price: float = None, take_profit: float = None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å / —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç.
    signal     ‚Äî "BUY" –∏–ª–∏ "SELL"
    size       ‚Äî –æ–±—ä—ë–º –≤ –±–∞–∑–æ–≤–æ–º –∞–∫—Ç–∏–≤–µ
    stop_price ‚Äî —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    take_profit‚Äî —É—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    """
    side = 'buy' if signal == 'BUY' else 'sell'
    try:
        # 1) Market order
        order = exchange.create_order(symbol, 'market', side, size)
        logging.info(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω MARKET {signal}: {size} @ market")
        
        # 2) Stop-loss (—Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç)
        if stop_price is not None:
            sl_side = 'sell' if signal == 'BUY' else 'buy'
            params = {
                'stopPrice': stop_price,
                'trigger': 'stop',       # –∏–ª–∏ 'loss' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
                'orderType': 'market'    # —Å—Ç–æ–ø-–º–∞—Ä–∫–µ—Ç
            }
            sl = exchange.create_order(symbol, 'stop', sl_side, size, None, params)
            logging.info(f"üîí –°—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä: {sl_side} {size} @ stopPrice={stop_price}")

        # 3) Take-profit (—Ç—Ä–µ–π–ª–∏–Ω–≥/—Ñ–∏–∫—Å)
        if take_profit is not None:
            tp_side = 'sell' if signal == 'BUY' else 'buy'
            params = {
                'stopPrice': take_profit,
                'trigger': 'profit',     # –∏–ª–∏ 'entry'/'take', –ø—Ä–æ–≤–µ—Ä—å —É OKX
                'orderType': 'limit'     # –ª–∏–º–∏—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞
            }
            tp = exchange.create_order(symbol, 'limit', tp_side, size, take_profit, params)
            logging.info(f"üèÅ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä: {tp_side} {size} @ price={take_profit}")

        return True

    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
        return False
