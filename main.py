import time
import logging
from datetime import datetime

from exchange import init_exchange
from data.fetcher import fetch_ohlcv
from features.market_features import (
    calc_price_speed,
    detect_volume_spike,
    near_round_level,
    detect_iceberg,
)
from features.orderbook_features import detect_orderbook_imbalance
from features.signal_generator import generate_signal
from features.risk_management import calc_atr, position_size
from orders.trader import execute_trade
from visual.trade_logger import log_trade

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
LOG_FORMAT = "%(asctime)s %(message)s"
logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
logger = logging.getLogger()
exchange = init_exchange()
def run_iteration(exchange, symbol, balance, risk_per_trade, sl_mul, tp_mul):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–¥–µ–ª–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ signal==NOTHING
    """
    # 1) OHLCV
    df = fetch_ohlcv(exchange, symbol)

    # 2) ATR –∏ —É—Ä–æ–≤–Ω–∏ SL/TP
    atr = calc_atr(df, period=14)
    price = df["close"].iat[-1]
    sl_long = price - sl_mul * atr
    sl_short = price + sl_mul * atr

    # 3) –î—Ä—É–≥–∏–µ —Ñ–∏—á–∏
    df = calc_price_speed(df)
    speed = df["price_speed"].iat[-1]
    vol_spike = detect_volume_spike(df)
    round_lvl = near_round_level(price)
    iceberg = detect_iceberg(df)
    ob_imbalance = detect_orderbook_imbalance(exchange, symbol) or 0

    # 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
    features = {
        "price": price,
        "speed": speed,
        "vol_spike": vol_spike,
        "round_lvl": round_lvl,
        "iceberg": iceberg,
        "orderbook_imbalance": ob_imbalance,
    }
    signal = generate_signal(features)
    if signal == "NOTHING":
        return None

    # 5) –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    if signal == "BUY":
        size = position_size(balance, risk_per_trade, price, sl_long)
        tp = price + tp_mul * atr
        trade = execute_trade(
            exchange, signal, symbol, size,
            stop_price=sl_long, take_profit=tp
        )
    else:  # SELL
        size = position_size(balance, risk_per_trade, price, sl_short)
        tp = price - tp_mul * atr
        trade = execute_trade(
            exchange, signal, symbol, size,
            stop_price=sl_short, take_profit=tp
        )

    if trade:
        # –ª–æ–≥–∏—Ä—É–µ–º –≤ CSV
        trade.update({
            "speed": speed,
            "vol_spike": vol_spike,
            "round_lvl": round_lvl,
            "iceberg": iceberg,
            "ob_imbalance": ob_imbalance,
            "balance": balance,
            "risk_per_trade": risk_per_trade
        })
        log_trade(trade)

    return {
        "symbol": symbol,
        "signal": signal,
        "size": size,
        "price": price
    }

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Scalper Bot (multi)")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    symbols = [
        "BTC/USDT", "ETH/USDT", "SOL/USDT", "XRP/USDT",
        "DOGE/USDT", "ADA/USDT", "MATIC/USDT", "LINK/USDT",
        "LTC/USDT", "SHIB/USDT"
    ]
    interval = 30               # —Å–µ–∫
    risk_per_trade = 0.01       # 1% –¥–µ–ø–æ–∑–∏—Ç–∞
    sl_mul = 1.0                # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ATR –¥–ª—è —Å—Ç–æ–ø–∞
    tp_mul = 2.0                # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ATR –¥–ª—è —Ç–µ–π–∫–∞

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ
    try:
        exchange = init_exchange()
        logger.info("‚úÖ OKX Connected")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    while True:
        start = time.time()
        # –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é –æ–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å
        balance = exchange.fetch_balance().get("USDT", {}).get("free", 0.0)

        results = []
        for symbol in symbols:
            try:
                res = run_iteration(
                    exchange, symbol,
                    balance, risk_per_trade, sl_mul, tp_mul
                )
                if res:
                    results.append(res)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ {symbol}: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
        now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        if not results:
            logger.info(f"{now} ‚Äî –ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ")
        else:
            for r in results:
                action = "–≤–æ—à–ª–∏ –≤" if r["signal"] == "BUY" else "–≤—ã—à–ª–∏ –∏–∑"
                logger.info(
                    f"{now} ‚Äî {action} —Å–¥–µ–ª–∫—É –ø–æ {r['symbol']} "
                    f"[{r['signal']}] price={r['price']:.2f} size={r['size']:.6f}"
                )

        # –ñ–¥—ë–º –æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        elapsed = time.time() - start
        time.sleep(max(0, interval - elapsed))

if __name__ == "__main__":
    main()
